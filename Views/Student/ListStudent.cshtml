@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@* “This page will receive a model that is a List<Student>.” *@
    @* So, inside the view, the keyword Model refers to whatever you passed from the controller, which in this case is a list of students. *@

    @*if you don't write this then  The Razor view doesn’t know what type of object Model is. *@



@model List<StudentPortal.Models.Entites.Student>   //automatic tell the view that it will receive a Model Object that is a @Type List<Student>
   
<h1>list of studnet</h1>

<table class="table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone Number</th>
            <th>Subscribe</th>
            <th> </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Model)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.Name</td>
                <td>@student.Email</td>
                <td>@student.PhoneNumber</td>
                <td>@(student.Subscribe ? "Yes" : "No")</td>
                <td>
                    <a class="btn btn-outline-primary" asp-area="" asp-controller="Student" asp-action="GetStudent" asp-route-id="@student.Id">Edit</a>
                    <form asp-action="DeleteStudent"
                          asp-controller="Student"
                          method="post"
                          style="display:inline;">

                            @* <input type="hidden" asp-for="Id" /> *@
                            @* both can work *@
                        <input type="hidden" name="Id" value="@student.Id" />
                        <button type="submit" class="btn btn-outline-danger">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
    
</table>